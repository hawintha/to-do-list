(() => { "use strict"; const e = (() => { const e = e => { const t = document.querySelectorAll("lord-icon"); for (let n of t) n.setAttribute("colors", e) }, t = t => { document.documentElement.className = t, localStorage.setItem("theme", t); const n = document.querySelector(".theme-icon"); "dark" === t ? (n.checked = !0, e("primary:#3565B0,secondary:#0540A0")) : (n.checked = !1, e("primary:#4FDDDE,secondary:#4FAAEF")) }, n = document.querySelector(".task-form"), s = document.querySelector(".project-form"), i = () => { document.querySelector(".taskView").classList.remove("minimized"), document.querySelector(".visible").classList.replace("visible", "minimized"), document.querySelector(".editing") && document.querySelector(".editing").classList.remove("editing") }; return { setTheme: t, getTheme: () => { localStorage.getItem("theme"), t(localStorage.getItem("theme")) }, toggleSidebar: () => { document.querySelector("body").classList.toggle("collapsed") }, switchCategories: e => { document.querySelector(".active").classList.remove("active"), e.classList.add("active"), r.filter(e) }, displayTask: (e, t) => { !function (e, t, n) { const s = document.createElement("div"); s.classList.add("task"), s.id = "task-" + t, n.appendChild(s); const r = document.createElement("div"); r.classList.add("line"), s.appendChild(r); const i = document.createElement("div"); i.classList.add("flex"), r.appendChild(i); const c = document.createElement("span"); c.classList.add("finish-icon", "material-symbols-outlined"), c.innerText = "circle", i.appendChild(c); const d = document.createElement("p"); d.innerText = e[t].title, i.appendChild(d); const o = document.createElement("div"); o.classList.add("grid"), r.appendChild(o); const a = document.createElement("p"); a.innerText = e[t].dueDate, o.appendChild(a); const l = document.createElement("div"); l.classList.add("flex"), o.appendChild(l); const m = document.createElement("span"); m.classList.add("expand", "material-symbols-outlined"), m.innerText = "expand_more", l.appendChild(m); const u = document.createElement("span"); u.classList.add("expand", "material-symbols-outlined", "hidden"), u.innerText = "expand_less", l.appendChild(u); const p = document.createElement("lord-icon"); p.classList.add("edit-icon"), p.src = "https://cdn.lordicon.com/hiqmdfkt.json", p.trigger = "loop-on-hover", p.colors = "primary:#4FDDDE,secondary:#4FAAEF", p.stroke = "100", p.style = "width:25px;height:25px", o.appendChild(p); const h = document.createElement("div"); h.classList.add("flex"), o.appendChild(h); const y = document.createElement("lord-icon"); y.classList.add("star"), y.src = "https://cdn.lordicon.com/whttoese.json", y.trigger = "morph", y.colors = "primary:#4FDDDE,secondary:#4FAAEF", y.stroke = "100", y.style = "width:25px;height:25px", h.appendChild(y); const g = document.createElement("span"); g.classList.add("star", "material-symbols-outlined", "hidden"), g.innerText = "star", h.appendChild(g); const v = document.createElement("lord-icon"); v.classList.add("trash-icon"), v.src = "https://cdn.lordicon.com/tntmaygd.json", v.trigger = "loop-on-hover", v.colors = "primary:#4FDDDE,secondary:#4FAAEF", v.stroke = "100", v.style = "width:25px;height:25px", v.state = "hover-empty", o.appendChild(v); const S = document.createElement("div"); S.classList.add("details", "hidden"), s.appendChild(S); const E = document.createElement("div"); E.classList.add("detail-title"), S.appendChild(E); const L = document.createElement("span"); L.innerText = "Title: ", E.appendChild(L); const q = document.createElement("span"); q.innerText = e[t].title, E.appendChild(q); const k = document.createElement("div"); k.classList.add("detail-description"), S.appendChild(k); const T = document.createElement("span"); T.innerText = "Description: ", k.appendChild(T); const x = document.createElement("span"); x.innerText = e[t].description, k.appendChild(x); const j = document.createElement("div"); j.classList.add("detail-project"), S.appendChild(j); const C = document.createElement("span"); C.innerText = "Project: ", j.appendChild(C); const f = document.createElement("span"); f.innerText = e[t].project, j.appendChild(f); const b = document.createElement("div"); b.classList.add("detail-due-date"), S.appendChild(b); const D = document.createElement("span"); D.innerText = "Due: ", b.appendChild(D); const w = document.createElement("span"); w.innerText = e[t].dueDate, b.appendChild(w) }(e, t, document.querySelector(".tasks")), function (e, t) { e[t].isImportant && (document.querySelector(`#task-${t} lord-icon.star`).classList.add("hidden"), document.querySelector(`#task-${t} span.star`).classList.remove("hidden")), e[t].isCompleted && r.toggleFinish(document.querySelector(`#task-${t} .finish-icon`)) }(e, t) }, toggleForm: e => { document.querySelector(".taskView").classList.add("minimized"), "project-editor" === e ? s.classList.contains("visible") ? i() : (n.classList.replace("visible", "minimized"), s.classList.replace("minimized", "visible"), document.querySelector("#newProject").value = "", document.querySelector(".add-project").classList.remove("hidden"), document.querySelector(".save-project").classList.add("hidden"), document.querySelector(".editing") && document.querySelector(".editing").classList.remove("editing")) : (s.classList.add("minimized"), n.classList.replace("minimized", "visible"), "task-editor" === e ? (document.querySelector(".create-task").classList.add("hidden"), document.querySelector(".confirm-edit").classList.remove("hidden"), document.querySelector(".task-form").firstElementChild.innerText = "Edit Task", document.querySelector(".isImportant").classList.add("hidden")) : "task-creator" === e && (n.reset(), document.querySelector(".active").classList.contains("project") && (document.querySelector("#projectName").value = document.querySelector(".active").firstElementChild.lastElementChild.innerText), document.querySelector(".create-task").classList.remove("hidden"), document.querySelector(".confirm-edit").classList.add("hidden"), document.querySelector(".task-form").firstElementChild.innerText = "New Task", document.querySelector(".isImportant").classList.remove("hidden"))) }, closeForm: i, addProject: (e, t, n, s) => { const r = document.createElement("div"); s ? r.classList.add("project", "category", "flex") : r.classList.add("nav-category", "project", "category", "flex"), r.dataset.index = t, n.appendChild(r); const i = document.createElement("div"); i.classList.add("flex"), r.appendChild(i); const c = document.createElement("span"); c.classList.add("material-symbols-outlined"), c.innerText = s ? "drag_indicator" : "checklist", i.appendChild(c); const d = document.createElement("span"); if (d.innerText = e[t].title, i.appendChild(d), s) { const n = document.querySelector("#projectName"), s = document.createElement("option"); s.value = e[t].title, s.innerText = e[t].title, n.appendChild(s); const i = document.createElement("div"); i.classList.add("flex"), r.appendChild(i); const c = document.createElement("lord-icon"); c.classList.add("project-edit"), c.src = "https://cdn.lordicon.com/hiqmdfkt.json", c.trigger = "loop-on-hover", c.colors = "primary:#4FDDDE,secondary:#4FAAEF", c.stroke = "100", c.style = "width:25px;height:25px", c.state = "hover-empty", i.appendChild(c); const d = document.createElement("lord-icon"); d.classList.add("project-trash"), d.src = "https://cdn.lordicon.com/tntmaygd.json", d.trigger = "loop-on-hover", d.colors = "primary:#4FDDDE,secondary:#4FAAEF", d.stroke = "100", d.style = "width:25px;height:25px", d.state = "hover-empty", i.appendChild(d) } } } })(), t = (() => { const t = document.querySelector("#newProject"); let s = []; class i { constructor(e, t) { this.title = e, this.isDeleted = t } } return s.push(new i("Project 1", !1)), s.push(new i("Project 2", !1)), s.push(new i("Project 3", !1)), { load: () => { document.querySelector(".projects").replaceChildren(), document.querySelector("#projectName").replaceChildren(); for (let t = 0; t < s.length; t++)s[t].isDeleted || (e.addProject(s, t, document.querySelector(".nav-projects")), e.addProject(s, t, document.querySelector(".projects"), !0)); n.addProjectListeners() }, create: () => { s.push(new i(t.value, !1)), e.addProject(s, s.length - 1, document.querySelector(".projects"), !0), e.addProject(s, s.length - 1, document.querySelector(".nav-projects"), !1), t.value = "", n.addProjectListeners() }, remove: t => { let n = t.dataset.index; s[n].isDeleted = !0, t.remove(), document.querySelector(`[value="${s[n].title}"]`).remove(), document.querySelector(".active").dataset.index === n && e.switchCategories(document.querySelector(".all")), document.querySelector(`[data-index="${n}"]`).remove() }, prepareEdit: e => { t.value = s[e.dataset.index].title, t.focus(), document.querySelector(".add-project").classList.add("hidden"), document.querySelector(".save-project").classList.remove("hidden"), document.querySelector(".editing") && document.querySelector(".editing").classList.remove("editing"), e.classList.add("editing") }, edit: () => { let e = document.querySelector(".editing").dataset.index; r.updateProject(s[e].title, t.value), document.querySelector(".editing").firstElementChild.lastElementChild.innerText = t.value, document.querySelector(`[data-index="${e}"]`).firstElementChild.lastElementChild.innerText = t.value, s[e].title = t.value, t.value = "", document.querySelector(".add-project").classList.remove("hidden"), document.querySelector(".save-project").classList.add("hidden") } } })(), n = (() => { function n(n) { for (let s of n) "true" !== s.getAttribute("listener") && (s.setAttribute("listener", "true"), s.addEventListener("click", (n => { s.classList.contains("finish-icon") ? r.toggleFinish(n.target, n.target.parentElement.parentElement.parentElement.id) : s.classList.contains("expand") ? (n.target.classList.toggle("hidden"), "expand_more" === n.target.innerText ? s.nextElementSibling.classList.toggle("hidden") : s.previousElementSibling.classList.toggle("hidden"), n.target.parentElement.parentElement.parentElement.nextElementSibling.classList.toggle("hidden")) : s.classList.contains("edit-icon") ? (e.toggleForm("task-editor"), r.prepareEdit(n.target.parentElement.parentElement.parentElement)) : s.classList.contains("star") ? (n.target.classList.toggle("hidden"), r.toggleStar(n.target, n.target.parentElement.parentElement.parentElement.parentElement.id)) : s.classList.contains("trash-icon") ? r.remove(n.target.parentElement.parentElement.parentElement) : s.classList.contains("project-edit") ? t.prepareEdit(n.target.parentElement.parentElement) : s.classList.contains("project-trash") ? t.remove(n.target.parentElement.parentElement) : s.classList.contains("cancel") ? e.closeForm() : s.classList.contains("nav-category") && e.switchCategories(n.currentTarget) }))) } return { findBtn: n, addTaskListeners: () => { n(document.querySelectorAll(".tasks .material-symbols-outlined")), n(document.querySelectorAll(".tasks lord-icon")), n(document.querySelectorAll(".cancel")) }, addProjectListeners: () => { n(document.querySelectorAll(".project-edit")), n(document.querySelectorAll(".project-trash")), n(document.querySelectorAll(".nav-category")) } } })(), s = (() => { let e = new Date, t = e.getFullYear(), n = (new Date).getMonth() + 1, s = e.getDate(), r = new Date(t, 0, 1); const i = (e, t, n) => { let s = new Date(e, t - 1, n); return Math.floor((s - r) / 864e5) }; return { today: e, yyyy: t, mm: n, dd: s, findDayNum: i, findWeekNum: (e, t, n) => Math.ceil(i(e, t, n) / 7) } })(), r = (() => { const t = document.querySelector("#taskTitle"), r = document.querySelector("#description"), i = document.querySelector("#projectName"), c = document.querySelector("#dueDate"), d = document.querySelector("#isImportant"); let o = []; class a { constructor(e, t, n, s, r, i, c) { this.title = e, this.description = t, this.project = n, this.dueDate = s, this.isImportant = r, this.isCompleted = i, this.isDeleted = c } } o.push(new a("Add dark mode", "Switch toggle on upper right corner", "Project 1", "2022-10-20", !1, !0)), o.push(new a("Change font", "Find better fonts on Google Fonts", "Project 1", "2022-10-22", !1, !1)), o.push(new a("Allow tasks to be categorized into projects", "", "Project 1", "2022-10-31", !0, !0)), o.push(new a("Allow tasks to be categorized by date", "", "Project 1", "2022-11-30", !0, !0)), o.push(new a("Display due dates on each task", "Hide due date when screen is narrow", "Project 1", "2022-12-12", !1, !0)), o.push(new a("Add Overdue category", "In nav between This Month & Important", "Project 1", "2022-12-21", !0, !0)), o.push(new a("Organize tasks by day of the week", "Format as Sunday - Dec. 25, 2022", "Project 1", "2022-12-22", !1, !1)), o.push(new a("Allow the order of projects to be rearranged", "", "Project 1", "2022-12-24", !1, !1)), o.push(new a("Save data via localStorage", "", "Project 1", "2023-01-01", !0, !1)), o.push(new a("Add tasks for other projects", "Tic Tac Toe, Pixel Painter", "Project 2", "2024-02-24", !1, !1)); const l = t => { document.querySelector(".tasks").replaceChildren(); for (let n = 0; n < o.length; n++) { let r = o[n].dueDate, i = r.substring(0, 4), c = r.substring(5, 7), d = r.substring(8); if (!o[n].isDeleted) if (t.classList.contains("project")) { let s = t.firstElementChild.lastElementChild.innerText; document.querySelector("h1").innerText = `${s} Tasks`, o[n].project === s && e.displayTask(o, n) } else t.classList.contains("all") ? (document.querySelector("h1").innerText = "All Tasks", e.displayTask(o, n)) : t.classList.contains("today") ? (document.querySelector("h1").innerText = "Today's Tasks", r === s.yyyy + "-" + s.mm + "-" + s.dd && e.displayTask(o, n)) : t.classList.contains("thisWeek") ? (document.querySelector("h1").innerText = "This Week's Tasks", s.findWeekNum(i, c, d) === s.findWeekNum(s.yyyy, s.mm, s.dd) && e.displayTask(o, n)) : t.classList.contains("thisMonth") ? (document.querySelector("h1").innerText = "This Month's Tasks", c === String(s.mm) && e.displayTask(o, n)) : t.classList.contains("overdue") ? (document.querySelector("h1").innerText = "Overdue Tasks", 0 > s.findDayNum(i, c, d) - s.findDayNum(s.yyyy, s.mm, s.dd) && !o[n].isCompleted && e.displayTask(o, n)) : t.classList.contains("important") ? (document.querySelector("h1").innerText = "Important Tasks", o[n].isImportant && e.displayTask(o, n)) : t.classList.contains("completed") && (document.querySelector("h1").innerText = "Completed Tasks", o[n].isCompleted && e.displayTask(o, n)) } n.addTaskListeners() }; return { load: () => { for (let t = 0; t < o.length; t++)o[t].isDeleted || e.displayTask(o, t); n.addTaskListeners() }, filter: l, toggleFinish: (e, t) => { "circle" === e.innerText ? (e.innerText = "task_alt", e.classList.add("finished"), e.nextElementSibling.classList.add("finished"), t && (o[t.substring(5)].isCompleted = !0)) : (e.innerText = "circle", e.classList.remove("finished"), e.nextElementSibling.classList.remove("finished"), t && (o[t.substring(5)].isCompleted = !1)) }, toggleStar: (e, t) => { "LORD-ICON" === e.tagName ? (e.nextElementSibling.classList.toggle("hidden"), o[t.substring(5)].isImportant = !0) : (e.previousElementSibling.classList.toggle("hidden"), o[t.substring(5)].isImportant = !1) }, create: () => { o.push(new a(t.value, r.value, i.value, c.value, d.checked)), document.querySelector(".task-form").reset(), l(document.querySelector(".active")) }, remove: e => { o[e.id.substring(5)].isDeleted = !0, e.remove() }, prepareEdit: e => { t.value = o[e.id.substring(5)].title, r.value = o[e.id.substring(5)].description, i.value = o[e.id.substring(5)].project, c.value = o[e.id.substring(5)].dueDate, document.querySelector(".editing") && document.querySelector(".editing").classList.remove("editing"), e.classList.add("editing") }, edit: () => { let e = o[document.querySelector(".editing").id.substring(5)]; document.querySelector(".editing p").innerText = t.value, document.querySelector(".editing .grid p").innerText = c.value, e.title = t.value, e.description = r.value, e.project = i.value, e.dueDate = c.value, document.querySelector(".editing .detail-title span:last-child").innerText = t.value, document.querySelector(".editing .detail-description span:last-child").innerText = r.value, document.querySelector(".editing .detail-project span:last-child").innerText = i.value, document.querySelector(".editing .detail-due-date span:last-child").innerText = c.value }, updateProject: (e, t) => { for (let n = 0; n < o.length; n++)o[n].project === e && (document.querySelector(`#task-${n} .detail-project`).lastElementChild.innerText = t, o[n].project = t); document.querySelector(`[value="${e}"]`).innerText = t, document.querySelector(`[value="${e}"]`).setAttribute("value", t) } } })(); r.load(), t.load(), function () { e.getTheme(); const n = document.querySelector(".theme-icon"); n.addEventListener("click", (() => n.checked ? e.setTheme("dark") : e.setTheme("light"))), document.querySelector(".menu-icon").addEventListener("click", (() => { e.toggleSidebar() })), document.querySelector(".add-task").addEventListener("click", (() => { e.toggleForm("task-creator") })), document.querySelector(".create-task").addEventListener("click", (() => { r.create(), e.closeForm() })), document.querySelector(".confirm-edit").addEventListener("click", (() => { r.edit(), e.closeForm() })), document.querySelector(".project-settings").addEventListener("click", (() => { e.toggleForm("project-editor") })), document.querySelector(".add-project").addEventListener("click", (() => { t.create() })), document.querySelector(".save-project").addEventListener("click", (() => { t.edit() })) }() })();